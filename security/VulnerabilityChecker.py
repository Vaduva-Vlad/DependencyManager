import requests
import PackageReader
from packaging.version import Version

class VulnerabilityChecker:
    def __init__(self, project_path):
        self.project_path = project_path
        self.package_reader=PackageReader.PackageReader(self.project_path)

    def filter_results(self, vulnerabilities,package_list):
        result={}
        for vuln in range(len(vulnerabilities)):
            if len(list(vulnerabilities[vuln].keys()))!=0:
                result[package_list[vuln]]=vulnerabilities[vuln]
        return result

    def check_all_packages(self):
        packages=self.package_reader.read_installed_packages()
        package_list=list(packages.keys())
        params={"queries":[]}

        for package in package_list:
            parameter={
                    "package": {
                        "name": f"{package}",
                        "ecosystem": "PyPI"
                    },
                    "version": f"{packages[package]}"
                }
            params["queries"].append(parameter)

        url = "https://api.osv.dev/v1/querybatch"
        response = requests.post(url, json=params)
        vulnerabilities = response.json()
        vulnerabilities=self.filter_results(vulnerabilities['results'],package_list)
        return vulnerabilities

    def check_package(self, package,version):
        url = "https://api.osv.dev/v1/query"
        params = {
            "package": {
                "name": f"{package}",
                "ecosystem": "PyPI"
            },
            "version": f"{version}"
        }
        response = requests.post(url, json=params)
        vulnerabilities = response.json()
        return vulnerabilities

    def report_vulnerabilities(self, package=None, version=None):
        if package is None:
            vulnerabilities = self.check_all_packages()
            if len(vulnerabilities)!=0:
                print("One or more security vulnerabilities have been detected for the following packages: ")
                print(list(vulnerabilities.keys()))
        else:
            good_version=Version("0")
            vulnerabilities = self.check_package(package,version)['vulns']
            if len(vulnerabilities)!=0:
                print(f"Security vulnerabilities have been found: ")
                for vuln in vulnerabilities:
                    ranges=vuln["affected"][0]["ranges"][0]["events"]
                    introduced=ranges[0]["introduced"]
                    if "fixed" in ranges[1].keys():
                        fixed=ranges[1]["fixed"]
                        print(f"Introduced: {introduced}; Fixed: {fixed}")
                        fixed=Version(fixed)
                        if fixed>good_version:
                            good_version=fixed
                    elif "last_affected" in ranges[1].keys():
                        last_affected = ranges[1]["last_affected"]
                        print(f"Introduced: {introduced}; Last affected: {last_affected}")
                        last_affected = Version(last_affected)
                        if last_affected > good_version:
                            good_version = last_affected
            print(f"We recommend updating your {package} version to >= {good_version} to remove these vulnerabilities.")


if __name__=="__main__":
    v=VulnerabilityChecker("C:/Users/vland/source/repos/depmanagertestproject")
    #print(v.check_all_packages())
    v.report_vulnerabilities("numpy","1.16.0")